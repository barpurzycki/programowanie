#include "pch.h"
#include <iostream>
#include <vector>
#include <map>

using namespace std;

void wypisz(int w)
{
	cout << w << "\n";
}

void wypisz(vector<int> tab)
{
	for (int i = 0; i < tab.size(); i++)
	{
		cout << tab[i] << " ";
	}
	cout << "\n";
}

bool czyNalezy(vector<int> tab, int el)
{
	for (int i = 0; i < tab.size(); i++)
	{
		if (el == tab[i])
		{
			return true;
		}
	}
	return false;
}

bool czyNalezyKlucz(map<int, int> m, int klucz)
{
	for (auto item : m) 
	{
		if (item.first == klucz) 
		{
			return true;
		}
	}

}

bool czyZawiera(vector <int> tab, vector<int> podzb)
{
	for (int i = 0; i < podzb.size(); i++)
	{
		if (!czyNalezy(tab, podzb[i]))
		{
			return false;
		}
	}
	return true;
}

int min(vector<int> tab)
{
	int min = tab[0];
	for (int i = 0; i < tab.size(); i++)
	{
		if (min > tab[i])
		{
			min = tab[i];
		}
	}
	return min;
}

vector<int> unikalnosc(vector<int> tab)
{
	vector<int> wynik;
	for (int i = 0; tab.size(); i++)
	{
		if (!czyNalezy(wynik, tab[i]))
		{
			wynik.push_back(tab[i]);
		}
	}
	return wynik;
}

vector<vector<int>> czestosc(vector<int> tab)
{
	vector<vector<int>> wynik;
	vector<int> jakiel = unikalnosc(tab);
	vector<int> iler;
	for (int i = 0; i < jakiel.size(); i++)
	{
		int el = jakiel[i];
		int licznik = 0;
		for (int j = 0; j < tab.size(); j++)
		{
			if (el == tab[j])
			{
				licznik++;
			}
		}
		iler.push_back(licznik);
	}
	wynik.push_back(jakiel);
	wynik.push_back(iler);
	return wynik;
}

map<int, int> czestoscmap(vector<int> tab)
{
	map<int, int>wynik;
	for (int i = 0; i < tab.size(); i++)
	{
		if (!czyNalezyKlucz(wynik, tab[i])) 
		{
			wynik.insert({ tab[i], 1 });
		}
		else 
		{
			wynik[tab[i]]++;
		}
	}
	return wynik;
}

int main()
{
	wypisz(3);
	vector<int> tab = { 1, 3, 5, 3, 7, 3, 7, 1, 2, 5 };
	vector<int> podz = { 1, 3 };
	wypisz(tab);
	bool wynik = czyNalezy(tab, 3);
	bool wynikczyzaw = czyZawiera(tab, podz);
	map<int, int> m;
	m.insert({ 8, 5 });
	m.insert({ 4, 2 });
	m.insert({ -3, 1 });
	bool wynikczynalklucz = czyNalezyKlucz(m, 8);
	if (wynikczynalklucz = true) 
	{
		cout << "nalezy";
	}

}
